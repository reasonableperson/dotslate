// Generated by CoffeeScript 1.7.1
(function() {
  var bindFrac, bindKey, chooseApp, chr, closeEdges, ex, filterApps, focus, focusApp, getWins, k, letters, modulo, numbers, p, priorityBindings, q, resizeFrac, throwPreservingFrac, work, x, _i, _j, _k, _len, _len1, _len2, _ref, _ref1, _ref2, _ref3,
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  slate.log("Running dotslate.coffee.");

  closeEdges = function(win) {
    var bool, edge, midpoint, proximate_to, scr, wrc, _results;
    scr = win.screen().rect();
    wrc = win.rect();
    midpoint = function(rect, axis) {
      var dir;
      dir = axis === 'x' ? 'width' : 'height';
      return rect[axis] + rect[dir] / 2;
    };
    proximate_to = {
      left: midpoint(wrc, 'x') <= midpoint(scr, 'x'),
      right: midpoint(wrc, 'x') > midpoint(scr, 'x'),
      top: midpoint(wrc, 'y') <= midpoint(scr, 'y'),
      bottom: midpoint(wrc, 'y') > midpoint(scr, 'y')
    };
    _results = [];
    for (edge in proximate_to) {
      bool = proximate_to[edge];
      if (bool) {
        _results.push(edge);
      }
    }
    return _results;
  };

  resizeFrac = function(p, q, screenId, subsplit) {
    if (screenId == null) {
      screenId = null;
    }
    if (subsplit == null) {
      subsplit = false;
    }
    return function(win) {
      var anchor, edges, h, hAnchor, scaleHorizontally, scr, screen, vAnchor, w, widescreen, _ref, _ref1;
      screen = screenId != null ? slate.screenr(screenId) : win.screen();
      slate.log('screenID', screenId, 'screen', screen);
      scr = screen.rect();
      _ref = [scr.width, scr.height], w = _ref[0], h = _ref[1];
      widescreen = w > h;
      if (subsplit && widescreen) {
        w = win.rect().width;
      }
      if (subsplit && !widescreen) {
        h = win.rect().height;
      }
      scaleHorizontally = subsplit ? !widescreen : widescreen;
      if (scaleHorizontally) {
        w = scr.width * p / q;
      } else {
        h = scr.height * p / q;
      }
      edges = closeEdges(win);
      _ref1 = ['top', 'left'], vAnchor = _ref1[0], hAnchor = _ref1[1];
      if (__indexOf.call(edges, 'right') >= 0 && __indexOf.call(edges, 'left') < 0) {
        hAnchor = 'right';
      }
      if (__indexOf.call(edges, 'bottom') >= 0 && __indexOf.call(edges, 'top') < 0) {
        vAnchor = 'bottom';
      }
      anchor = "" + vAnchor + "-" + hAnchor;
      return win.doOperation(slate.operation("corner", {
        direction: anchor,
        width: w,
        height: h,
        screen: screen
      }));
    };
  };

  bindFrac = function(p, q) {
    var bindString;
    bindString = "" + q + ":" + p + ";ctrl";
    slate.bind(bindString, resizeFrac(p, q));
    return slate.bind(bindString + ";cmd", resizeFrac(p, q, null, true));
  };

  _ref = [1, 2, 3, 4];
  for (_i = 0, _len = _ref.length; _i < _len; _i++) {
    q = _ref[_i];
    bindFrac(1, q);
  }

  _ref1 = [[2, 3], [3, 4]];
  for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
    _ref2 = _ref1[_j], p = _ref2[0], q = _ref2[1];
    bindFrac(p, q);
  }

  modulo = function(n, m) {
    return ((n % m) + m) % m;
  };

  throwPreservingFrac = function(increment) {
    return function(win) {
      var dim, numScreens, proportion, scr, screenId, widescreen, wrc;
      scr = win.screen().rect();
      wrc = win.rect();
      widescreen = scr.width > scr.height;
      dim = widescreen ? 'width' : 'height';
      proportion = wrc[dim] / scr[dim];
      numScreens = slate.screenCount();
      screenId = modulo(slate.screen().id() + increment, numScreens);
      slate.log('throwing', screenId);
      return resizeFrac(proportion, 1, screenId)(win);
    };
  };

  slate.bind("9:e;ctrl", throwPreservingFrac(-1));

  slate.bind("0:e;ctrl", throwPreservingFrac(1));

  focus = function(win) {
    return win.focus();
  };

  work = slate.layout('work', {
    'Google Chrome': {
      operations: [resizeFrac(2, 3, 0), focus]
    },
    'iTerm': {
      operations: [resizeFrac(1, 3, 0), resizeFrac(2, 3, 0, true), focus]
    },
    'Adium': {
      operations: [resizeFrac(1, 3, 0), resizeFrac(1, 3, 0, true), focus]
    },
    'Microsoft Outlook': {
      operations: [resizeFrac(2, 3, 1), focus]
    },
    'Calendar': {
      operations: [resizeFrac(1, 3, 1), focus]
    }
  });

  slate.bind("8:e;ctrl", slate.operation('layout', {
    name: 'work'
  }));

  priorityBindings = {
    x: 'Excel',
    t: 'iTerm',
    w: 'VMware Fusion',
    v: 'Cisco AnyConnect Secure Mobility Client'
  };

  filterApps = function(key) {
    var priorityApp, result;
    result = [];
    priorityApp = null;
    slate.eachApp(function(a) {
      var name;
      if (!a) {
        return false;
      }
      name = a.name();
      if (name.split(' ')[0] === 'Microsoft') {
        name = name.split(' ').slice(1).join(' ');
      }
      if (name === priorityBindings[key]) {
        priorityApp = a;
        result.push(a);
      }
      if (name[0].toLowerCase() === key) {
        return result.push(a);
      }
    });
    return [result, priorityApp];
  };

  getWins = function(app) {
    var w;
    w = [];
    app.eachWindow(function(me) {
      return w.push(me);
    });
    return w;
  };

  chooseApp = function(apps, priorityApp, curWin) {
    var a, appsWithWindows, _ref3;
    appsWithWindows = (function() {
      var _k, _len2, _results;
      _results = [];
      for (_k = 0, _len2 = apps.length; _k < _len2; _k++) {
        a = apps[_k];
        if (getWins(a).length > 0) {
          _results.push(a);
        }
      }
      return _results;
    })();
    if (curWin && (_ref3 = curWin.app().pid(), __indexOf.call((function() {
      var _k, _len2, _results;
      _results = [];
      for (_k = 0, _len2 = apps.length; _k < _len2; _k++) {
        a = apps[_k];
        _results.push(a.pid());
      }
      return _results;
    })(), _ref3) >= 0)) {
      return appsWithWindows.slice(-1)[0];
    } else if (priorityApp) {
      return priorityApp;
    } else if (appsWithWindows.length > 0) {
      return appsWithWindows[0];
    } else if (apps.length > 0) {
      return apps[0];
    } else {
      return null;
    }
  };

  focusApp = function(key, win) {
    var a, app, apps, priorityApp, winName, _ref3;
    if (win && win.app) {
      winName = win.app().name();
    } else {
      winName = "(none)";
    }
    slate.log("keypress: " + key + ", sourceWindow: " + winName);
    _ref3 = filterApps(key), apps = _ref3[0], priorityApp = _ref3[1];
    slate.log("Possible apps:", (function() {
      var _k, _len2, _results;
      _results = [];
      for (_k = 0, _len2 = apps.length; _k < _len2; _k++) {
        a = apps[_k];
        _results.push(a.name());
      }
      return _results;
    })());
    app = chooseApp(apps, priorityApp, win);
    if (!app) {
      return slate.log("Tried to switch to an app with no binding.");
    } else {
      slate.log("Target app", app.name());
      return (slate.operation("focus", {
        app: app
      })).run();
    }
  };

  bindKey = function(key, app) {
    var bindStr;
    bindStr = "" + key + ":e;ctrl";
    return slate.bind(bindStr, function(win) {
      return focusApp(key, win);
    });
  };

  ex = ['r', 'j', 'k'];

  chr = function(int) {
    return String.fromCharCode(x);
  };

  letters = (function() {
    var _k, _results;
    _results = [];
    for (x = _k = 97; _k <= 122; x = ++_k) {
      if (chr(__indexOf.call(ex, x) < 0)) {
        _results.push(chr(x));
      }
    }
    return _results;
  })();

  numbers = (function() {
    var _k, _results;
    _results = [];
    for (x = _k = 0; _k <= 9; x = ++_k) {
      _results.push(x.toString());
    }
    return _results;
  })();

  _ref3 = letters.concat(numbers);
  for (_k = 0, _len2 = _ref3.length; _k < _len2; _k++) {
    k = _ref3[_k];
    bindKey(k);
  }

}).call(this);
